name: Build and Package

on:
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check_commits.outputs.should_build }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check for Feature Commits
        id: check_commits
        run: |
          HAS_FEATURE_COMMITS=false
          if git log --pretty=format:"%s" -n 1 | grep -E "^(feat:|add:)"; then
            HAS_FEATURE_COMMITS=true
          fi
          echo "HAS_FEATURE_COMMITS=$HAS_FEATURE_COMMITS" >> $GITHUB_ENV
          echo "should_build=$HAS_FEATURE_COMMITS" >> $GITHUB_OUTPUT

  build_and_release:
    needs: build
    if: needs.build.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        run: npm install

      - name: Build Production
        run: npm run build:prod

      - name: Extract Current Version
        id: extract_version
        run: |
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Increment Version
        id: increment_version
        run: |
          OLD_VERSION="${{ env.CURRENT_VERSION }}"
          IFS='.' read -r major minor patch <<< "$OLD_VERSION"
          NEW_PATCH=$((patch + 1))
          NEW_VERSION="$major.$minor.$NEW_PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update package.json
        run: |
          jq --arg newVersion "${{ env.NEW_VERSION }}" '.version = $newVersion' package.json > package.json.tmp && mv package.json.tmp package.json

      - name: Commit and Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add package.json
          git commit -m "chore: bump version to v${{ env.NEW_VERSION }}"
          git tag v${{ env.NEW_VERSION }}
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Generate Release Notes
        run: |
          echo "## Installation Instructions" > release_notes.txt
          echo "" >> release_notes.txt
          echo "To install the extension, follow these steps:" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "1. Download the \`reply-guy-v${{ env.NEW_VERSION }}-prod.zip\` file from the release assets." >> release_notes.txt
          echo "2. Extract the zip file to a directory of your choice." >> release_notes.txt
          echo "3. Open your browser and go to the extensions page (chrome://extensions or edge://extensions)." >> release_notes.txt
          echo "4. Enable 'Developer mode' at the top right corner." >> release_notes.txt
          echo "5. Click on 'Load unpacked' and select the extracted directory." >> release_notes.txt
          echo "" >> release_notes.txt
          echo "The extension should now be installed and ready to use." >> release_notes.txt

      - name: Create or Update Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          draft: false
          prerelease: false
          body: |
            ## Installation Instructions

            To install the extension, follow these steps:

            1. Download the `reply-guy-v${{ env.NEW_VERSION }}-prod.zip` file from the release assets.
            2. Extract the zip file to a directory of your choice.
            3. Open your browser and go to the extensions page (chrome://extensions or edge://extensions).
            4. Enable 'Developer mode' at the top right corner.
            5. Click on 'Load unpacked' and select the extracted directory.

      - name: Upload Build to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/chrome-mv3-prod.zip
          asset_name: reply-guy-v${{ env.NEW_VERSION }}-prod.zip
          asset_content_type: application/zip

      - name: Upload Installation Instructions to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_notes.txt
          asset_name: reply-guy-v${{ env.NEW_VERSION }}-release-notes.txt
          asset_content_type: text/plain

  update_release_notes:
    needs: build
    if: needs.build.outputs.should_build != 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Last Tag
        id: get_last_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_ENV
          echo "LAST_TAG=$LAST_TAG" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        run: |
          echo "## Installation Instructions" > release_notes.txt
          echo "" >> release_notes.txt
          echo "To install the extension, follow these steps:" >> release_notes.txt
          echo "" >> release_notes.txt
          echo "1. Download the \`reply-guy-${{ env.LAST_TAG }}-prod.zip\` file from the release assets." >> release_notes.txt
          echo "2. Extract the zip file to a directory of your choice." >> release_notes.txt
          echo "3. Open your browser and go to the extensions page (chrome://extensions or edge://extensions)." >> release_notes.txt
          echo "4. Enable 'Developer mode' at the top right corner." >> release_notes.txt
          echo "5. Click on 'Load unpacked' and select the extracted directory." >> release_notes.txt
          echo "" >> release_notes.txt
          echo "The extension should now be installed and ready to use." >> release_notes.txt

      - name: Create or Update Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.LAST_TAG }}
          release_name: Release ${{ env.LAST_TAG }}
          draft: false
          prerelease: false
          body: |
            ## Installation Instructions

            To install the extension, follow these steps:

            1. Download the `reply-guy-${{ env.LAST_TAG }}-prod.zip` file from the release assets.
            2. Extract the zip file to a directory of your choice.
            3. Open your browser and go to the extensions page (chrome://extensions or edge://extensions).
            4. Enable 'Developer mode' at the top right corner.
            5. Click on 'Load unpacked' and select the extracted directory.
        ignore_if_exists: true

      - name: Upload Installation Instructions to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_notes.txt
          asset_name: reply-guy-${{ env.LAST_TAG }}-release-notes.txt
          asset_content_type: text/plain